// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace dotnet_token_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806200506_DebtRecord")]
    partial class DebtRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DebtActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DebtId")
                        .HasColumnType("int");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("DebtActivities");
                });

            modelBuilder.Entity("Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IssuerId")
                        .HasColumnType("int");

                    b.Property<string>("IssuerUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientName")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10m,
                            ExpirationDate = new DateTime(2025, 8, 13, 20, 5, 6, 613, DateTimeKind.Utc).AddTicks(4456),
                            IssuedAt = new DateTime(2025, 8, 6, 20, 5, 6, 613, DateTimeKind.Utc).AddTicks(4456),
                            IssuerId = 2,
                            IssuerUsername = "alice",
                            RecipientId = 3,
                            RecipientName = "Bob Johnson",
                            RecipientUsername = "bob",
                            Remarks = "Test token",
                            Status = "pending"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EmailTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            IsEmailVerified = false,
                            Name = "Administrator",
                            PasswordHash = "$2a$11$XsZr4GMvkNNFa0JXLxB5LexfSGVvlkaM7X4o2Df0Atbz8EaaKfhXK",
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "alice@example.com",
                            IsEmailVerified = false,
                            Name = "Alice Smith",
                            PasswordHash = "$2a$11$p.SZkLb6F/pUTKmdKAz6JOV7vOHg1ZRanCrmxFO3dq9l/IgblpRym",
                            Role = "user",
                            Username = "alice"
                        },
                        new
                        {
                            Id = 3,
                            Email = "bob@example.com",
                            IsEmailVerified = false,
                            Name = "Bob Johnson",
                            PasswordHash = "$2a$11$oyGFrec31WJmEeByqBpqz.32kziHqFNJ6T/EXyH5PnrxJUReEiu0K",
                            Role = "user",
                            Username = "bob"
                        });
                });

            modelBuilder.Entity("dotnet_token_api.Models.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("DebtActivity", b =>
                {
                    b.HasOne("dotnet_token_api.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debt");
                });
#pragma warning restore 612, 618
        }
    }
}
