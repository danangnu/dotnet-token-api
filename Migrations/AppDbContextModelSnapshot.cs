// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace dotnet_token_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DebtActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DebtId")
                        .HasColumnType("int");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("DebtActivities");
                });

            modelBuilder.Entity("Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IssuerId")
                        .HasColumnType("int");

                    b.Property<string>("IssuerUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientName")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50m,
                            ExpirationDate = new DateTime(2025, 10, 10, 2, 57, 48, 336, DateTimeKind.Utc).AddTicks(8685),
                            IssuedAt = new DateTime(2025, 9, 7, 2, 57, 48, 336, DateTimeKind.Utc).AddTicks(8667),
                            IssuerId = 4,
                            IssuerUsername = "user1",
                            RecipientId = 5,
                            RecipientName = "Bob Johnson",
                            RecipientUsername = "user2",
                            Remarks = "Welcome credit",
                            Status = "accepted"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 75m,
                            ExpirationDate = new DateTime(2025, 10, 25, 2, 57, 48, 336, DateTimeKind.Utc).AddTicks(8700),
                            IssuedAt = new DateTime(2025, 9, 9, 2, 57, 48, 336, DateTimeKind.Utc).AddTicks(8700),
                            IssuerId = 5,
                            IssuerUsername = "user2",
                            RecipientId = 6,
                            RecipientName = "Charlie Brown",
                            RecipientUsername = "user3",
                            Remarks = "Project advance",
                            Status = "pending"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EmailTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            IsEmailVerified = false,
                            Name = "Administrator",
                            PasswordHash = "$2a$11$DFqAGsSE3NGgjlAI7P8nI.d3maEW/hTvV2RpfP/baMRFc1avWQQie",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "manager@example.com",
                            IsEmailVerified = false,
                            Name = "Manager One",
                            PasswordHash = "$2a$11$DLvBftNyCYa3ITdbCwLf8uvPqRfEl7P31sGpmu9oqvm3gcEoenVRW",
                            Role = "Manager",
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            Email = "auditor@example.com",
                            IsEmailVerified = false,
                            Name = "Auditor Jane",
                            PasswordHash = "$2a$11$AbeQHLAtE50AHy/sNJ4g3em.SOvYJibdwzONtQF2HKuyX6p4ht.mS",
                            Role = "Auditor",
                            Username = "auditor"
                        },
                        new
                        {
                            Id = 4,
                            Email = "alice@example.com",
                            IsEmailVerified = false,
                            Name = "Alice Smith",
                            PasswordHash = "$2a$11$yi.hFsOiDHD9nSerarnCIelTUtra839GqlQwF2wL8U8/In3THwGji",
                            Role = "User",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 5,
                            Email = "bob@example.com",
                            IsEmailVerified = false,
                            Name = "Bob Johnson",
                            PasswordHash = "$2a$11$4KHc1LH/nB8PUa9iJ4NovOAXW3QNWG74yk5Ft52uX7NbkVRqFK216",
                            Role = "User",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 6,
                            Email = "charlie@example.com",
                            IsEmailVerified = false,
                            Name = "Charlie Brown",
                            PasswordHash = "$2a$11$ijUAJd2bvT.QAr5k6PatZ.MannLhfRnvnFu2BZnk1p.4Bg69MO4W.",
                            Role = "User",
                            Username = "user3"
                        },
                        new
                        {
                            Id = 7,
                            Email = "diana@example.com",
                            IsEmailVerified = false,
                            Name = "Diana Prince",
                            PasswordHash = "$2a$11$tdW8yUEDwE1PXHR8SzmsmO5MW6RWgn8ADxgxKZMQ1iopStybua0fK",
                            Role = "User",
                            Username = "user4"
                        },
                        new
                        {
                            Id = 8,
                            Email = "ethan@example.com",
                            IsEmailVerified = false,
                            Name = "Ethan Hunt",
                            PasswordHash = "$2a$11$Lmrlq4IK3FS6CFqlwSQpbeWYn2oldPcpPdJJ7BY0jWbHtURxqkm8S",
                            Role = "User",
                            Username = "user5"
                        },
                        new
                        {
                            Id = 9,
                            Email = "fiona@example.com",
                            IsEmailVerified = false,
                            Name = "Fiona Apple",
                            PasswordHash = "$2a$11$dD9akh5lCSIDt/sMUQ2pfO4vTLxtquPxuLhq.cJm2HBEbMAPfeevq",
                            Role = "User",
                            Username = "user6"
                        },
                        new
                        {
                            Id = 10,
                            Email = "george@example.com",
                            IsEmailVerified = false,
                            Name = "George Miller",
                            PasswordHash = "$2a$11$iZzc9OfSuZfSCkfn5CJZCOO9gizJSuOgvce0KvS20.PaTNCo14z2C",
                            Role = "User",
                            Username = "user7"
                        });
                });

            modelBuilder.Entity("dotnet_token_api.Models.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("DebtActivity", b =>
                {
                    b.HasOne("dotnet_token_api.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debt");
                });
#pragma warning restore 612, 618
        }
    }
}
